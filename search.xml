<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些小知识点</title>
      <link href="/posts/6153c8cd.html"/>
      <url>/posts/6153c8cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="一些小知识点"><a href="#一些小知识点" class="headerlink" title="一些小知识点"></a>一些小知识点</h1><h2 id="关于输入和输出"><a href="#关于输入和输出" class="headerlink" title="关于输入和输出"></a>关于输入和输出</h2><ol><li><strong>scanf</strong> 和<strong>cin</strong><br>知识点：<br><strong>scanf</strong> 在读入的时候，不会自动过滤掉空格，制表符<br><strong>cin</strong>则自动过滤掉了</li><li><strong>fgets</strong>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  fgets（buf，n，stdin）;</span><br><span class="line"><span class="comment">//buf:这是指向一个字符数组的指针，该数组存储了要读取的字符串</span></span><br><span class="line"><span class="comment">//n:这是要读取的最大字符数（包括最后的空字符）。通常是使用以 str 传递的数组长度</span></span><br><span class="line"><span class="comment">//stdin</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="关于循环"><a href="#关于循环" class="headerlink" title="关于循环"></a>关于循环</h2><ol><li><p>循环n次的一个简单方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n--)&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单斐波那契</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">   &#123;</span><br><span class="line">     cout &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">     <span class="type">int</span> c = a + b;</span><br><span class="line">     a = b;</span><br><span class="line">     b = c;</span><br><span class="line">   &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>循环在时间复杂度方面的一个优化</p><p><strong>例题：</strong><br>一个整数，除了本身以外的其他所有约数的和如果等于该数，那么我们就称这个整数为完全数。</p><p>例如，6 就是一个完全数，因为它的除了本身以外的其他约数的和为 1+2+3&#x3D;6。</p><p>现在，给定你 <strong>N</strong> 个整数，请你依次判断这些数是否是完全数。 </p><p><strong>输入格式</strong><br>第一行包含整数 N，表示共有 N 个测试用例。</p><p>接下来 N 行，每行包含一个需要你进行判断的整数 X。</p><p><strong>输出格式</strong><br>每个测试用例输出一个结果，每个结果占一行。</p><p>如果测试数据是完全数，则输出 <em>X is perfect</em>，其中 X 是测试数据。</p><p>如果测试数据不是完全数，则输出 <em>X is not perfect</em>，其中 X 是测试数据。</p><p><strong>数据范围</strong><br>1≤N≤100,<br>1≤X≤108</p></li></ol>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> N;</span><br><span class="line">  cin&gt;&gt;N;</span><br><span class="line">  <span class="keyword">while</span>(N--)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> m ,sum=<span class="number">0</span>;</span><br><span class="line">      cin&gt;&gt;m;</span><br><span class="line">      <span class="keyword">if</span>(m==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d is not perfect\n&quot;</span>,m);</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">      &#123;</span><br><span class="line">          sum+=<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(m);i++) <span class="keyword">if</span>(m%i==<span class="number">0</span>) </span><br><span class="line">       &#123;</span><br><span class="line">          <span class="type">int</span> n=m/i;<span class="comment">//做除后的另一个约数</span></span><br><span class="line">          <span class="keyword">if</span>(n==i) sum+=i;<span class="comment">//判断是否是开根</span></span><br><span class="line">          <span class="keyword">else</span> sum+=(i+n);</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">if</span>(sum==m) <span class="built_in">printf</span>(<span class="string">&quot;%d is perfect\n&quot;</span>,m);</span><br><span class="line">           <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d is not perfect\n&quot;</span>,m);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>x</strong>本身<strong>除以一个约数</strong>往往可以<strong>得到另外一个约数</strong>，如果在这里思考下手并优化，极有可能<strong>减少至少开根号的循环量</strong></li><li>使用数学函数，<strong>sqrt</strong> 作为限制循环次数的条件，而另外一个约数则由<strong>输入数x除以当前的循环的约数</strong>，即可求<strong>得另一约数</strong><br>注：此处需要考虑等于的情况，比如16， 开根号是4， 4也是约数， 优化过后，复杂度为O(10^6) 100万 完全hold住</li><li>以后遇到此类题，诸如质数、完全数 等<strong>定义中带有约数、需要整除</strong>，优化方面皆可朝<strong>开平方</strong>处思考</li></ul><h2 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h2><p>首先是要理解数组，是一种储存数据的强而有力的手段</p><p>1. </p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/d95d7e09.html"/>
      <url>/posts/d95d7e09.html</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇博客"><a href="#这是我的第一篇博客" class="headerlink" title="这是我的第一篇博客"></a>这是我的第一篇博客</h1><h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><h3 id="三级标题测试"><a href="#三级标题测试" class="headerlink" title="三级标题测试"></a>三级标题测试</h3><p>你好<br>换行</p><h1 id="新起"><a href="#新起" class="headerlink" title="新起"></a>新起</h1><p>斜体<em>文字两边加上</em><br>一个* 或者CTRL+I<br>加粗<strong>文字两边加上</strong><br>两个* 或者CTRL+B</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>1+.+空格（列表）</li><li>回车后向下扩<ol><li>二级<ol><li>Tab加列表级</li></ol></li></ol></li></ol><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>这是一个<a href="https://ntdzyy.github.io/">链接</a><br>直接将地址复制到想加链接的文字上即可</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br></pre></td></tr></table></figure><p>三个小 &#96; 括住代码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
